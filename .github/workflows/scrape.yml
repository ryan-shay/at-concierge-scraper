name: scrape-appointmenttrader

on:
  schedule:
    - cron: "*/10 * * * *"   # every 10 minutes
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: scrape-appointmenttrader
  cancel-in-progress: false

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # ⬇️ NEW: use a unique primary key + a fresh prefix so we never hit the old immutable cache
      - name: Restore state cache
        uses: actions/cache@v4
        with:
          path: state.v1.json
          key: state2-v1-${{ github.run_id }}         # unique each run
          restore-keys: |
            state2-v1-                                # pulls the most recent matching cache

      # (Optional) Verify pre-state was restored
      - name: Show pre-state
        run: |
          [ -f state.v1.json ] && echo "::group::pre-state" && cat state.v1.json && echo "::endgroup::" || echo "no state"

      - name: Install deps
        run: npm ci || npm install

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run scraper
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          FIRST_RUN: "false"       # normal mode
          SEED_IF_EMPTY: "true"    # silently seed if cache missing
          DEBUG_LOG: "0"
        run: npm run scrape

      # (Optional) Verify state was updated
      - name: Show post-state
        run: |
          [ -f state.v1.json ] && echo "::group::post-state" && cat state.v1.json && echo "::endgroup::" || echo "no state written"

      # ⬇️ Save with the SAME unique key as the restore step
      - name: Save state cache
        uses: actions/cache@v4
        with:
          path: state.v1.json
          key: state2-v1-${{ github.run_id }}
          restore-keys: |
            state2-v1-
